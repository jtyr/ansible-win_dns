---

- name: Checking {{ record.type }} record parameters
  assert:
    that:
      - record.zone != None
      - record.name != None
      - record.value != None
  tags:
    - win_dns_assert

- name: Check if zone {{ record.zone }} exists
  win_shell: >
    dnscmd . /enumzones |
    Select-String -pattern '^ {{ record.zone }} .*$' -quiet
  when: >
    'state' not in record or
    record['state'] == 'present'
  register: win_dns_zone_exists
  changed_when: no

- name: Create new zone {{ record.zone }}
  win_shell: >
    dnscmd . /zoneadd {{ record.zone }} /primary
  when: >
    (
      'state' not in record or
      record['state'] == 'present'
    ) and
    win_dns_zone_exists.stdout | trim != 'True'

- name: Check if {{ record.type }} record exists
  win_shell: >
    dnscmd /enumrecords {{ record.zone }} . |
    Select-String -pattern '^{{ record.name }}\s+{{ record.ttl | default(win_dns_ttl_default, True) }}\s+{{ record.type }}\s+{{ record.value }}$' -quiet
  register: win_dns_record_exists
  changed_when: no

- name: Create new {{ record.type }} record
  win_shell: >
    dnscmd . /recordadd {{ record.zone }} {{ record.name }} {{ (record.ttl | default(win_dns_ttl_default, True)) }} {{ record.type }} {{ record.value }}
  when: >
    win_dns_record_exists.stdout | trim != 'True' and (
      'state' not in record or
      record['state'] == 'present'
    )

- name: Delete {{ record.type }} record
  win_shell: >
    dnscmd . /recorddelete {{ record.zone }} {{ record.name }} {{ record.type }} {{ record.value }} /f
  when: >
    win_dns_record_exists.stdout | trim == 'True' and
    'state' in record and
    record['state'] == 'absent'
